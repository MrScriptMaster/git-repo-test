#!/bin/bash
trap 'get_window_size' WINCH        # trap when a user has resized the window
 
_UNDERLINE_ON=$(tput smul)          # turn on underline
_UNDERLINE_OFF=$(tput rmul)         # turn off underline
 
function get_window_size() {
  _WINDOW_X=$(tput lines)
  _WINDOW_Y=$(tput cols)
 
  _FULL_SPACES=$(echo "" | awk)
  {
    _SPACES=${_WINDOW_Y}
    while ((_SPACES-- > 0)); do printf " "; done
  }
  _FULL_UNDERLINE=$(echo "${_UNDERLINE_ON}${_FULL_SPACES}${_UNDERLINE_OFF}")
 
  unset _FULL_SPACES
  show_menu
 
  return 0
}
 
function set_color() {
  tput clear
  PS3="Enter Selection [1-9]: "
  select _COLOR in "Black" "Blue" "Green" "Cyan" "Red" "Magenta" "Yellow" "White" "Exit"
  do

    case ${REPLY} in
       [1-8])  _X=$(expr ${REPLY} - 1) ;;
           9)  break ;;
           *)  echo "Invalid Color"; continue ;;
    esac
 
    if [[ ${1} = "b" ]]
    then
      tput setb ${_X}
    else
      tput setf ${_X}
    fi
  done
}

function print_colors() {
  tput clear
  for code in {1..256}; do
    echo -ne "\\033[01;${code}m${code}\\033[00m "
  done
  for line in "bold" "shadow" "light" "blinking" "reverse"; do
    case $line in
      bold) echo -ne "\\033[1;32m${line}\\033[00m " ;;
      shadow) echo -ne "\\033[2;32m${line}\\033[00m " ;;
      light) echo -ne "\\033[4;32m${line}\\033[00m " ;;
      blinking) echo -ne "\\033[5;32m${line}\\033[00m " ;;
      reverse) echo -ne "\\033[7;32m${line}\\033[00m " ;;
    esac
  done
  echo
  read -p "Press [Enter] key to continue"
}

function show_menu() {
  while [[ -z ${_ANS} ]]
  do
    tput civis
    tput clear
 
printf "
  Window Size: ${_WINDOW_X} x ${_WINDOW_Y}
 
  Select => ${_UNDERLINE_ON}     ${_UNDERLINE_OFF}
 
  ${_FULL_UNDERLINE}
  B) Background Text Color
  F) Foreground Text Color
  C) Print codes of colors
  X) Exit
"
    tput rc
    tput smul
    tput cnorm
 
    read _ANS
    tput rmul

    case ${_ANS} in
      [Bb])  set_color "b" ;;
      [Ff])  set_color "f" ;;
      [Cc])  print_colors  ;;
      [Xx])  tput clear; exit ;;
         *)
             echo -e "Invalid Selection: ${_ANS}\c"
             sleep 2
             ;;
    esac

    unset _ANS
  done
}

# Set up to defaults
tput sgr0
# Set cursor to invisible
# Note: To make cursor is visible you should use 'cnorm' 
tput civis
# Clear the screen
tput clear
# Positioning of cursor
tput cup 3 12
# Save position [3,12]
tput sc
# Go to up left corner of the window
tput cup 0 0
 
[[ -n ${_ANS} ]] && unset _ANS
get_window_size
 
exit 0

# --------------------------------------------------------------------------------
#
# tput (результатом будет строка)
#   bel        Звуковой сигнал
#   blink      Режим мерцания
#   bold       Двойная интенсивность
#   civis      Скрыть курсор
#   clear      Очистить экран
#   cnorm      Отобразить курсор
#   cup Y X    Переместить курсор на строку Y и столбец X. Отсчет идет от верхнего
#              левого угла рабочей области терминала.
#   el         Очистить текущую строку от позиции курсора до конца строки
#   ell        Очистить текущую строку от позици курсора к началу строки
#   smso       Переход в режим отступа
#   rmso       Выход из режима отступа
#   smul       Переход в режим подчеркивания
#   rmul       Выход из режима подчеркивания
#   sc         Сохранение текущей позиции курсора
#   rc         Удаление текущей позиции курсора
#   sgr0       Вернуть экран в обычное состояние
#   rev        Обратить вывод
#
# tput (результатом будет число)
#   cols       Текущее число столбцов в рабочей области терминала
#   lines      Текущее число строк в рабочей области терминала
#   it         Размер табуляции
#
# tput (результатом будет логическое утверждение)
#   chts       Курсор видим?
#   hs         Строка статуса активирована?
#
# --------------------------------------------------------------------------------
#
# stty [-a] [опция настройки] [терминальное устройство]
#
# Управляет драйвером терминального устройства ввода/вывода.
#
#   -a   Вывести одной строкой все настройки устройства в форме,
#        понятной человеку.
#   -g   Вывести одной строкой все настройки в форме, понятной драйверу.
#   sane 
#        Вернуть все настройки в значения по умолчанию.
#
# Некоторые опции:
#
#   intr    Послать сигнал INT
#   quit    Послать синал QUIT
#   size    Размер области вывода устройства в формате 'Ширина Высота', например: 20 120.
#   erase   Удалить последний введенный символ
#   kill    Удалить текущую строку
#   eof     Послать символ EOF или конец ввода
#   eol     Послать символ EOL или конец строки
#   eol2    Альтернативный символ EOL (Не POSIX)
#   switch  Переключиться на другой уровень оболочки (Не POSIX)
#   start   Продолжить вывод на устройство, если ранее он был приостановлен
#   stop    Приостановить вывод на устройство
#   susp    Послать сигнал TERM для останвки терминала
#   dsusp   Послать сигнал TERM для остановки терминала, но сначала сбросить все буферы (Не POSIX)
#   rprnt   Перерисовать текущую строку (Не POSIX)
#   werase  Удалить последнее введенное слово (Не POSIX)
#   lnext   Протолкнуть следующий символ
#
# Для дополнительной информации используйте команду
#     stty --help
#
# Некоторые приемы
# ----------------
# Перед экспериментированием с настройками обязательно сохраните оригинальные
# через ключ -g. В этом случае их легко можно восстаносить, если ваши эксперименты
# нарушили нормальную работу устройства.
#
#     BACKUP_STTY=$(stty -g)
#     stty "$BACKUP_STTY"
#
# stty может обращаться к драйверам терминалов ввода/вывода, принтерам, модемам и пр.
#
# Команда 'stty sane' сбрасывает все настройки до разумных значений, при которых
# обеспечивается минимальная работоспособность. Однако помните, что эти значения
# не обязательно будут совпадать с теми, что были после инициализации устройства.
#
# --------------------------------------------------------------------------------
#
# Синтаксис для переменной PS1
#
# PS1 предназначена для вывода приглашения ввода. Пример
#
#      PS1='\t j\j \u@\h:\w\n\$ '
#
#    \t    Время завершения предыдущей команды
#    \j    Выводит количество запущенных процессов, которые связаны с текущим терминалом
#    \u    Имя пользователя, который подключился к текущему терминалу
#    \h    Имя хоста терминала
#    \w    Текущая рабочая директория
#    \$    Заменяется на символ '#' если сейчас пользователь 'root', в противном случае
#          на знак доллара
#    \!    Номер текущей команды в истории
#    \A    Время в 24-часовом формате
#
#
#
# --------------------------------------------------------------------------------
#
# Подкраска вывода терминала
#
# Некоторые приложения используют переменную окружения LC_COLORS для подкрашивания
# своего вывода, например утилита ls. Чтобы узнать текущее значение LC_COLORS, можно воспользоваться
# командой
#   dircolors [-p]
# Обычно оболочка bash использует файл ~/.dircolors из ~/.bashrc, чтобы настроить цвета для
# выводимых логических фрагментов для утилит, поддерживающих опцию '--color'.
#
# Типичный фрагмент в файле .bashrc выглядит так
#
# if [[ -x /usr/bin/dircolors ]]; then
#   [[ -r ~/.dircolors ]] && eval "$(dircolors -b ~/.dircolors)" || "$(dircolors -b)"
#   alias ls='ls --color=auto'
#   alias ...--color=auto'
#   ...
# fi
#
# --------------------------------------------------------------------------------
#
# Управляющие последовательности терминала
#
# Звук
# ----
#   \007            Издать звук внутренним динамиком
#   \033[10;#]      Установить частоту звукового сигнала в Гц, где вместо # подставить значение
#   \033[11;#]      Установить продолжительность звукового сигнала в мс, где вместо # подставить значение
#
#  Первые два кода можно объединить, например так \033[10;5000;11;200].
#
# Цвет
# ----
#   \033[0m         Сброс к значению по умолчанию
#   \033[1m         Полужирное начертание
#   \033[2m         Приглушенный цвет
#   \033[4m         Яркий цвет
#   \033[5m         Мигание
#   \033[7m         Реверсивное начертание: фон буквы приобретает цвет
#   \033[22m        Установить нормальную интенисивность
#   \033[24m        Убрать подчеркивание
#   \033[25m        Убрать мигание
#   \033[27m        Отменить реверсивное начертание
#   \033[30m        Черный
#   \033[31m        Красный
#   \033[32m        Зеленый
#   \033[33m        Коричневый
#   \033[34m        Синий
#   \033[35m        Фиолетовый
#   \033[36m        Голубой
#   \033[37m        Серый
#   \033[40m        Черный фон
#   \033[41m        Красный фон
#   \033[42m        Зеленый фон
#   \033[43m        Коричневый фон
#   \033[44m        Синий фон
#   \033[45m        Фиолетовый фон
#   \033[46m        Голубой фон
#   \033[47m        Серый фон
#
# Несколько последовательностей можно объединить
#
#   \033[1m\033[5m\033[36m ~ \033[1;5;36m
#
# Обратите внимание на то, что управляющие последовательности следует завершать
# символом \], чтобы при подсчете длины они не учитывались оболочкой. Например, для переменной
# PS1 это критично, так как подсчет длины в ней используется при расстановке переносов.
#
# Позиция курсора
# ---------------
# Примечание: везде вместо # нужно подставить число
#
#    \033[#A     Передвинуть курсор вверх на указанное число позиций
#    \033[#B     Передвинуть курсор вниз на указанное число позиций
#    \033[#C     Передвинуть курсор вправо на указанное число позиций
#    \033[#D     Передвинуть курсор влево на указанное число позиций
#    \033[#E     Передвинуть курсор вниз на указанное число позиций и поставить его в начало строки
#    \033[#F     Передвинуть курсор вверх на указанное число позиций и поставить его в начало строки
#    \033[#G     Передвинуть курсор в укзанный столбец текущей строки
#    \033[#;#H   Поместить курсор в указанную строку и столбец
#    
# Палитра
# -------
#     \033]Pnrrggbb
#    
#      P   номер цвета
#      rr  код красного оттенка
#      gg  код зеленого оттенка
#      bb  код синего оттенка
#    
# Другое
# ------
#     \033[12;#]      Сделать текущей вирутальную консоль, указанную в номере
#    
#   XTerm
#    \033]0;text\007    Присвоить имя окну и иконке
#    \033]1;text\007    Присвоить имя иконке
#    \033]2;text\007    Присвоить имя окну
#    
